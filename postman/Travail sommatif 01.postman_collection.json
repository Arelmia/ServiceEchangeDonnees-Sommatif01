{
	"info": {
		"_postman_id": "1cba9f83-4483-4f71-b5f1-46c9a1db9a4e",
		"name": "Travail sommatif 01",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GET /movies",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const {expect, response, test, sendRequest} = pm;\r",
							"\r",
							"test('Status is 200', () => {\r",
							"    response.to.have.status(200);\r",
							"});\r",
							"\r",
							"test('Body is in JSON', ()=> {\r",
							"    expect(response.headers.get('content-type')).to.equal('application/json; charset=utf-8'); \r",
							"})\r",
							"\r",
							"const body = response.json()[0];\r",
							"\r",
							"test('Page exist and is 1', ()=> {\r",
							"    expect(body).to.haveOwnProperty('page').equal(1);\r",
							"})\r",
							"\r",
							"test('Per_page exist and is 50', ()=> {\r",
							"    expect(body).to.haveOwnProperty('per_page').equal(50);\r",
							"})\r",
							"\r",
							"test('Order_by exist and is id', ()=> {\r",
							"    expect(body).to.haveOwnProperty('order_by').equal(\"id\");\r",
							"})\r",
							"\r",
							"test('Prev_page is undefined', ()=>{\r",
							"    expect(body.prev_page).to.be.undefined\r",
							"})\r",
							"\r",
							"test('Next_page is working and return page 2', ()=>{\r",
							"    sendRequest(body.next_page, (err, response)=> {\r",
							"        expect(err).to.be.null;\r",
							"        expect(response.code).to.equal(200);\r",
							"        expect(response.json()[0].page).to.equal(2);\r",
							"    })\r",
							"})\r",
							"\r",
							"test('Pdf_page is working', ()=>{\r",
							"    sendRequest(body.pdf_page, (err, response)=> {\r",
							"        expect(err).to.be.null;\r",
							"        expect(response.code).to.equal(200);\r",
							"    })\r",
							"})\r",
							"\r",
							"test('User received', ()=>{\r",
							"    expect(body.movies).to.be.an(\"array\");\r",
							"    expect(body.movies).to.have.lengthOf.at.most(body.per_page);\r",
							"})\r",
							"\r",
							"test('User fields', ()=>{\r",
							"    for(let movie of body.movies) {\r",
							"        expect(movie).to.haveOwnProperty(\"id\")\r",
							"        expect(movie).to.haveOwnProperty(\"movie_genres\");    \r",
							"        expect(movie).to.haveOwnProperty(\"movie_title\");    \r",
							"        expect(movie).to.haveOwnProperty(\"details\");\r",
							"        expect(Object.keys(movie).length).to.be.equals(4);\r",
							"    }\r",
							"})\r",
							"\r",
							"test('Sorting order', ()=>{\r",
							"    for(let i = 0; i < body.per_page - 2; i++) {\r",
							"        expect(body.movies[i].id < body.movies[i+1].id)\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/movies",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"movies"
					],
					"query": [
						{
							"key": "per_page",
							"value": "20",
							"disabled": true
						},
						{
							"key": "page",
							"value": "2",
							"disabled": true
						},
						{
							"key": "order_by",
							"value": "id",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /movies/[params]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const {expect, response, test, sendRequest} = pm;\r",
							"\r",
							"test('Status is 200', () => {\r",
							"    response.to.have.status(200);\r",
							"});\r",
							"\r",
							"test('Body is in JSON', ()=> {\r",
							"    expect(response.headers.get('content-type')).to.equal('application/json; charset=utf-8'); \r",
							"})\r",
							"\r",
							"const body = response.json()[0];\r",
							"\r",
							"test('Page exist and is 2', ()=> {\r",
							"    expect(body).to.haveOwnProperty('page').equal(2);\r",
							"})\r",
							"\r",
							"test('Order_by exist and is movie_title', ()=> {\r",
							"    expect(body).to.haveOwnProperty('order_by').equal(\"movie_title\");\r",
							"})\r",
							"\r",
							"test('Per_page exist and is 20', ()=> {\r",
							"    expect(body).to.haveOwnProperty('per_page').equal(20);\r",
							"})\r",
							"\r",
							"test('Prev_page is working and return page 1', ()=>{\r",
							"    sendRequest(body.prev_page, (err, response)=> {\r",
							"        expect(err).to.be.null;\r",
							"        expect(response.code).to.equal(200);\r",
							"        expect(response.json()[0].page).to.equal(1);\r",
							"    })\r",
							"})\r",
							"\r",
							"test('Next_page is working and return page 3', ()=>{\r",
							"    sendRequest(body.next_page, (err, response)=> {\r",
							"        expect(err).to.be.null;\r",
							"        expect(response.code).to.equal(200);\r",
							"        expect(response.json()[0].page).to.equal(3);\r",
							"    })\r",
							"})\r",
							"\r",
							"test('Pdf_page is working', ()=>{\r",
							"    sendRequest(body.pdf_page, (err, response)=> {\r",
							"        expect(err).to.be.null;\r",
							"        expect(response.code).to.equal(200);\r",
							"    })\r",
							"})\r",
							"\r",
							"test('User received', ()=>{\r",
							"    expect(body.movies).to.be.an(\"array\");\r",
							"    expect(body.movies).to.have.lengthOf.at.most(body.per_page);\r",
							"})\r",
							"\r",
							"test('User fields', ()=>{\r",
							"    for(let movie of body.movies) {\r",
							"        expect(movie).to.haveOwnProperty(\"id\")\r",
							"        expect(movie).to.haveOwnProperty(\"movie_genres\");    \r",
							"        expect(movie).to.haveOwnProperty(\"movie_title\");    \r",
							"        expect(movie).to.haveOwnProperty(\"details\");\r",
							"        expect(Object.keys(movie).length).to.be.equals(4);\r",
							"    }\r",
							"})\r",
							"\r",
							"test('Sorting order', ()=>{\r",
							"    for(let i = 0; i < body.per_page - 2; i++) {\r",
							"        expect(body.movies[i].id < body.movies[i+1].id)\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/movies?per_page=20&page=2&order_by=movie_title",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"movies"
					],
					"query": [
						{
							"key": "per_page",
							"value": "20"
						},
						{
							"key": "page",
							"value": "2"
						},
						{
							"key": "order_by",
							"value": "movie_title"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /movies/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const {expect, response, test} = pm;\r",
							"\r",
							"test(\"Result is 200\", () => {    \r",
							"    response.to.have.status(200);\r",
							"    });\r",
							"\r",
							"test(\"Result has right ID\", () => {    \r",
							"    let requestedId = Number(pm.request.url.path[1]);    \r",
							"    expect(response.json().id).to.eq(requestedId);\r",
							"    });\r",
							"    \r",
							" test(\"All fields are present\", () => {    \r",
							"     let body = response.json();    \r",
							"     expect(body).to.haveOwnProperty(\"id\");    \r",
							"     expect(body).to.haveOwnProperty(\"movie_title\");    \r",
							"     expect(body).to.haveOwnProperty(\"release_date\");    \r",
							"     expect(body).to.haveOwnProperty(\"original_voice_acting\");\r",
							"     });\r",
							"     \r",
							"test(\"All fields are right format\", () => {    \r",
							"    let body = response.json();    \r",
							"    expect(body.id).to.be.a(\"Number\");    \r",
							"    expect(body.movie_title).to.be.a(\"String\");    \r",
							"    expect(Date.parse(body.release_date)).to.not.eql(NaN);    \r",
							"    });\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/movies/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"movies",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /movies.pdf",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const {expect, response, test} = pm;\r",
							"\r",
							"test(\"Result is 200\", () => {    \r",
							"    response.to.have.status(200);\r",
							"});\r",
							"\r",
							"test('Content-type is PDF', ()=> {\r",
							"    expect(response.headers.get('content-type')).to.equal('application/pdf'); \r",
							"});\r",
							"\r",
							"test('PDF can be downloaded', ()=> {\r",
							"    expect(response.headers.get('content-disposition')).to.equal('attachment; filename=List of movies.pdf'); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/movies.pdf",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"movies.pdf"
					],
					"query": [
						{
							"key": "per_page",
							"value": "10",
							"disabled": true
						},
						{
							"key": "page",
							"value": "1",
							"disabled": true
						},
						{
							"key": "order_by",
							"value": "id",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET /movies.pdf?[params]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const {expect, response, test} = pm;\r",
							"\r",
							"test(\"Result is 200\", () => {    \r",
							"    response.to.have.status(200);\r",
							"});\r",
							"\r",
							"test('Content-type is PDF', ()=> {\r",
							"    expect(response.headers.get('content-type')).to.equal('application/pdf'); \r",
							"});\r",
							"\r",
							"test('PDF can be downloaded', ()=> {\r",
							"    expect(response.headers.get('content-disposition')).to.equal('attachment; filename=List of movies.pdf'); \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/movies.pdf?per_page=10&page=1&order_by=movie_title",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"movies.pdf"
					],
					"query": [
						{
							"key": "per_page",
							"value": "10"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "order_by",
							"value": "movie_title"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "POST /movies/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const {expect, response, test} = pm;\r",
							"\r",
							"test('Status is 204', () => {\r",
							"    response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"movie_title\": \"Secret Glory, The\",\r\n    \"movie_genres\": \"Documentary\",\r\n    \"release_date\": \"12/14/2020\",\r\n    \"original_voice_acting\": \"Filipino\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/movies/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"movies",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "(Insert) POST /movies with JSON",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const {expect, response, test} = pm;\r",
							"\r",
							"test('Status is 204', () => {\r",
							"    response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"movie_title\": \"insertionTest\",\r\n    \"movie_genres\": \"insertionTest\",\r\n    \"release_date\": \"insertionTest\",\r\n    \"original_voice_acting\": \"insertionTest\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/movies",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "(Insert) POST /movies with urlencoded",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const {expect, response, test} = pm;\r",
							"\r",
							"test('Status is 204', () => {\r",
							"    response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "movie_title",
							"value": "urlencodedTest",
							"type": "text"
						},
						{
							"key": "movie_genres",
							"value": "urlencodedTest",
							"type": "text"
						},
						{
							"key": "release_date",
							"value": "urlencodedTest",
							"type": "text"
						},
						{
							"key": "original_voice_acting",
							"value": "urlencodedTest",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:3000/movies",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"movies"
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE /movies/:id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const {expect, response, test} = pm;\r",
							"\r",
							"test('Status is 204', () => {\r",
							"    response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/movies/:id",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"movies",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "1130"
						}
					]
				}
			},
			"response": []
		}
	]
}